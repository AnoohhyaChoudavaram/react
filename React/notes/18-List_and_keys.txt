list without key attribute
<ul>                        <ul>
    <li>Bruce</li>              <li>Bruce</li>
    <li>Clark</li>              <li>Clark</li>
</ul>                           <li>Diana</li>
                            </ul>

React will atch the first items in each lists and keys there is no difference it 
then matches the second two items and sees no difference and when it tries to match the third item it
says that there is a difference and simply inserts the third item into the Dom tree this way
instead of tearing down the old tree and building the new tree from scratch react simply updates the tree by insulting
the item at the end of the list nothing else has to change.

<ul>                        <ul>
    <li>Bruce</li>              <li>Bruce</li>
    <li>Clark</li>              <li>Clark</li>
</ul>                           <li>Diana</li>
                            </ul>

But this time we need to insert it at the beginning of the list
what happens in this situation is that when react iterates over both the lists and make a
comparision it finds out that every item is different react will end up mutating
every child instead of realizing it can keep the Bruce and Clark sub
tree intact this inefficiency can be a problem and in order to solve this issue react
supports the key attribute.

-> when children have keys react uses the key to match the children in the 
original tree with children in the subsequent tree now react knows that the 
element with key 3 is the new one and the elements with the keys 1 & 2
have just moved so react will preserve the sub tree and simply insert the new item at the top of 
the list this as it turns out is much more efficient.

=> A "key" is a special string attribute we need to include when creating lists
of elements.
keys give the elements a stable identity.
keys help react identify which items have changed, are added, or are removed.
help in efficient update of the user interface.

